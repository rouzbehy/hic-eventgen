#!/bin/bash

# Check that we're in either a conda env or python virtualenv.
# In a conda env if CONDA_PREFIX points to a valid directory and the python
# executable is in CONDA_PREFIX.
if [[ -d "$CONDA_PREFIX" && "$(which python)" -ef "$CONDA_PREFIX/bin/python" ]]; then
  prefix="$CONDA_PREFIX"
else
  # In a virtualenv if file pyvenv.cfg exists one level above the python
  # executable.  (This is better than checking the VIRTUAL_ENV variable, which
  # may not be set.)
  prefix="$(readlink -f "$(dirname "$(which python)")/..")"
  if [[ ! -f "$prefix/pyvenv.cfg" ]]; then
    echo 'must install in an active python virtualenv or conda env'
    exit 1
  fi
fi

# go to project root (directory above this script)
# https://stackoverflow.com/a/246128
cd "$(dirname "${BASH_SOURCE[0]}")"/..

# build each model
for i in models/*/; do
  pushd $i

  # determine whether to build with CMake or python
  if [[ $i == *osu-hydro* ]]; then
    echo "use h5fc for osu-hydro hdf5 output" 
    if [[ $(hostname) == *@(opensciencegrid.org|osgconnect.net) ]]; then
      module unload gcc/6.2.0
      export FC=/cvmfs/oasis.opensciencegrid.org/osg/modules/hdf5/1.8.13/bin/h5fc
    else
      export FC=h5fc
    fi
    export FFLAGS='-march=x86-64 -ffast-math'
  fi

  if [[ -f CMakeLists.txt ]]; then
    # create build directory and run cmake if necessary
    if [[ -d build ]]; then
      cd build
    else
      mkdir build && cd build
      # subshell allows temporary environment modification
      (
        [[ $i == *urqmd-afterburner* && $NERSC_HOST ]] && {
          # urqmd has a fatal runtime error when compiled by Intel
          module swap PrgEnv-{intel,gnu}
          export FC=gfortran FFLAGS=$GNU_FLAGS
        }
        exec cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/ \
          ..

      ) || exit 1
    fi

    # compile and install
    make --jobs=$(nproc) DESTDIR=$prefix install || exit 1
  elif [[ -f setup.py ]]; then
    # install python packages
    # subshell allows temporary environment modification
    (
      [[ $PY_FLAGS ]] && export CFLAGS=$PY_FLAGS CXXFLAGS=$PY_FLAGS
      exec python setup.py install
    ) || exit 1
  else
    echo "unknown build system for model $i"
    exit 1
  fi

  if [[ $i == *osu-hydro* ]]; then
    if [[ $(hostname) == *@(opensciencegrid.org|osgconnect.net) ]]; then
      module load gcc/6.2.0
    fi
    export FC=gfortran
    export FFLAGS="-march=x86-64 -mtune=intel -ffast-math"
  fi

  popd
done

# install the event runner script and wrapper
install -v models/run-events{,-wrapper} "$prefix/bin"
install -v models/*centrality.dat "$prefix/share"
